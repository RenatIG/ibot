const TelegramBot = require('node-telegram-bot-api');
const mongoose = require("mongoose");
const config = require('./config');
const helper = require('./helper');
const keyboard = require('./keyboard');
const kb = require('./keyboard-buttons');
let winners = []

helper.logStart();

mongoose.Promise = global.Promise;
mongoose.connect(config.DB_URL)
    .then(() => console.log('MongoDB connected'))
    .catch((err) => console.log(err));

require('./models/usd.model');
require('./models/user.model');
require('./models/rub.model');
require('./models/btc.model');
require('./models/admin.model');
const User = mongoose.model('users');
const Usd = mongoose.model('usd');
const Rub = mongoose.model('rub');
const Btc = mongoose.model('btc');
const Admin = mongoose.model('admin');
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

const bot = new TelegramBot(config.TOKEN, {
    polling: true
})

bot.on('message', msg => {

   
    const chatId = helper.getChatId(msg)

    switch (msg.text) {
        case kb.home.usd:
            USD(chatId, msg.from.id)
            break;
        case kb.home.rub:
            RUB(chatId, msg.from.id)
            break;
        case kb.home.btc:
            BTC(chatId, msg.from.id)
            break;
        case kb.home.support:
            bot.sendMessage(msg.from.id, `t.me/sup4u_bot`
                ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
            break;
        case kb.usd.back:
            bot.sendMessage(msg.from.id, `<b>üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>`
                ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
            break;
        case kb.home.bonus:
            BONUS(msg)
            break;
        case kb.home.news:
            bot.sendMessage(msg.from.id, `<a href="https://t.me/joinchat/AAAAAE6fDSfSe0AZ8T_rYA">–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª..</a>`, {parse_mode: 'HTML'})

    }
});
//inline_keyboard=====================================

const inline_keyboard = {
    rub: [
    [ {text: 'üì• –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'rubadd'},
        {text: 'üì§ –£–¥–∞–ª–∏—Ç—å', callback_data: 'rubdel'}],
    [{text: '+ –î–µ–ø–æ–∑–∏—Ç—ã +', callback_data: 'rubdep'},
        {text: '+ –í—ã–ø–ª–∞—Ç—ã +', callback_data: 'rubcash'}
    ]
    ],
    usd: [
        [ {text: 'üì• –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'usdadd'},
            {text: 'üì§ –£–¥–∞–ª–∏—Ç—å', callback_data: 'usddel'}],
        [{text: '+ –î–µ–ø–æ–∑–∏—Ç—ã +', callback_data: 'usddep'},
            {text: '+ –í—ã–ø–ª–∞—Ç—ã +', callback_data: 'usdcash'}
        ]
    ],
    btc: [
        [ {text: 'üì• –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'btcadd'},
            {text: 'üì§ –£–¥–∞–ª–∏—Ç—å', callback_data: 'btcdel'}],
        [{text: '+ –î–µ–ø–æ–∑–∏—Ç—ã +', callback_data: 'btcdep'},
            {text: '+ –í—ã–ø–ª–∞—Ç—ã +', callback_data: 'btccash'}
        ]
    ],
    bonus: [
        [ {text: 'ü§ó –ü–æ–ª—É—á–∏—Ç—å', callback_data: 'get'}]
        ]
}
//START====================================================

bot.onText(/\/start/, msg => {

    let userPromise

    User.findOne({tgId: msg.from.id})
        .then(user => {
            if(user) {
                bot.sendMessage(msg.from.id, `üöÄ <b>–°—Ç–∞—Ä—Ç</b> - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ) \nü§† –∏ —Å–Ω–æ–≤–∞.. –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${msg.from.first_name}</b>!)`
                    ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'}
                    )
                userPromise = user
            } else {
                userPromise = new User({
                    name: msg.from.first_name,
                    tgId: msg.from.id,

                    allinvr: false,
                    allcashr: false,
                    allprofitr: false,

                    allinvu: false,
                    allcashu: false,
                    allprofitu: false,

                    allinvb: false,
                    allcashb: false,
                    allprofitb: false
                    })


                userPromise.save().then(_ => {
                    bot.sendMessage(msg.from.id, `üëãüòé –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, <b>${msg.from.first_name}</b>!`
                        ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'}
                        )
                })
            }
        })
})

//USD USD USD USD USD USD USD USD USD USD USD USD USD USD ===========================================

function USD(chatId, tgId) {
    Promise.all([
        User.findOne({tgId}) ,
        Usd.find({tgId})
    ])
        .then(([user, invest])  => {
          let html
                if (invest.length) {

                 html = invest.map((f, i) => {
                    return `${i + 1}. ${f.statu} <b>${f.projectu}:</b>\nüí∏ <code>${f.depu}$</code> | üíµ <code>${f.cashu}$</code> | üí∞ <code>${f.profitu}$</code>`
                }).join('\n')
        } else {
            html = 'ü§∑‚Äç‚ôÇÔ∏è <i>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç..</i>'
                }
        bot.sendMessage(tgId,`<b>$ üëàüòé –ü–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è —É—á–µ—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:</b>\n~~~~~~~~~~~~~~~~~~~~\n`+ html+ `\n~~~~~~~~~~~~~~~~~~~~\n<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\nüí∏ ${user.allinvu}$ <code>(–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ)</code>\nüíµ ${user.allcashu}$ <code>(–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ)</code>\nüí∞ ${user.allprofitu}$ <code>(–ø—Ä–æ—Ñ–∏—Ç)</code>`
            , { reply_markup:{inline_keyboard: inline_keyboard.usd} , parse_mode: 'HTML'})

                })}

//callback_query================================================

bot.on('callback_query', query => {
        const userId = query.from.id

    switch (query.data) {
        case 'usdadd':
            usdadd(userId, query.id)
            break;
        case 'usddel':
            usddel(userId, query.id)
            break;
        case 'usddep':
            usddep(userId, query.id)
            break;
        case 'usdcash':
            usdcash(userId, query.id)
            break;
    }})

//USD ADD=================================================

function usdadd(userId) {
    bot.sendMessage(userId, `ü§î <b>–ö—É–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º?</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/usdadd</code> –Ω–∞–∑–≤–∞–Ω–∏–µ`,
        {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})}

    bot.onText(/\/usdadd (.+)/, (msg, match) => {
        const chatId = msg.chat.id
        const project = match[1]
        const tgId = msg.from.id
        if(msg.text !== '–ù–∞–∑–∞–¥'){

            let usdPromise
            Usd.findOne({tgId: tgId,
                projectu: project})
                .then((invest) => {
                    if (invest) {
                        bot.sendMessage(chatId, `üôÑ <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ —É–∂–µ –µ—Å—Ç—å</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`
                        , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                    }
                        else {
                        usdPromise = new Usd({
                            projectu: project,
                            tgId: msg.from.id
                        })
                        usdPromise.save()
                            .then (invest => {

                            bot.sendMessage(chatId, `üëåüòé <b>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b> <i>"${invest.projectu}"</i>`
                                ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})

                        }) ¬†¬†¬†¬†}
                })}

    })

//USD DEL=================================================
function usddel(chatId) {
    bot.sendMessage(chatId, `üòï <b>–ß—Ç–æ —Å–Ω–µ—Å—Ç–∏ –≤ –°–ö–ê–ú?</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/usddel</code> –Ω–∞–∑–≤–∞–Ω–∏–µ`,
        {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}
bot.onText(/\/usddel (.+)/, (msg, match) => {

    const chatId = msg.chat.id
    const project = match[1]
    const tgId = msg.from.id
    if(project !== '–ù–∞–∑–∞–¥'){
        Usd.findOne({tgId: tgId, projectu: project})
            .then(invest => {
                if(!invest) {
                    bot.sendMessage(chatId, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})}

                else {
                    Promise.all([
                        Usd.findOne({tgId: tgId, projectu: project}),
                        User.findOne({tgId: msg.from.id})
                    ])
                        .then(([invest, user]) => {
                            const sum = +`${user.allinvu}` - +`${invest.depu}`

                            Promise.all([
                                User.findOneAndUpdate({tgId: msg.from.id},
                                    {$set: {allinvu: sum.toFixed(2)}}
                                    ,{returnOriginal: false}),

                                Usd.deleteOne({projectu: project})
                            ]).then(_ => {

                                bot.sendMessage(chatId, `üò§ <b>–ò–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —É–¥–∞–ª–µ–Ω:</b> <i>"${project}"</i>`
                                    ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})

                            }) ¬†¬†¬†¬†})}
            })}
})
//USD DEP==========================================
function usddep(userId) {
    bot.sendMessage(userId, `üí™ <b>–°–∞–º–æ–µ –≤—Ä–µ–º—è —É—Å–∏–ª–∏—Ç—å—Å—è!</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/usddep</code> –Ω–∞–∑–≤–∞–Ω–∏–µ <code>-</code> —Å—É–º–º–∞`
        ,{reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}

bot.onText(/\/usddep (.+) - (.+)/, (msg, match) => {
    const project = match[1]
    const deposit = match[2]
    const tgId = msg.from.id

    if(msg.text !== '–ù–∞–∑–∞–¥') {
        Promise.all([
            Usd.findOne({tgId: tgId, projectu: project}),
            User.findOne({tgId: msg.from.id})
            ])
                .then(([invest, user]) => {
                    if(!invest) {
                        bot.sendMessage(msg.from.id, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})
                    }
                        else {
                        const dep = +`${invest.depu}` + +`${deposit}`
                        const profit = +`${invest.profitu}` - +`${deposit}`
                        const alldep = +`${user.allinvu}` + +`${deposit}`
                        const allprofit = +`${user.allprofitu}` - +`${deposit}`
                        let a = false
                        if(invest){a = Math.sign(profit) !== -1}
                        const b = a ? '‚≠ê' : '‚ôªÔ∏è'
                        Promise.all([
                            Usd.findOneAndUpdate({tgId: tgId, projectu: project},
                                    {$set: {depu: dep.toFixed(2), profitu: profit.toFixed(2), statu: b}}
                                    ,{returnOriginal: false}),
                                User.findOneAndUpdate({tgId: msg.from.id},
                                    {$set: {allinvu: alldep.toFixed(2), allprofitu: allprofit.toFixed(2)}}
                                    ,{returnOriginal: false})
                                ])
                                .then(_ => {
                                    bot.sendMessage(msg.from.id, `üëåüòé <b>–ë–∞–ª–∞–Ω—Å—ã –ø–æ–¥–±–∏—Ç—ã!</b> \n<code>${deposit}$</code> –∫ –¥–µ–ø–æ–∑–∏—Ç—É –≤ <b>"${project}"</b>`
                                        , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                                })
                    }}) } })

//USD CASH================================================
function usdcash(userId) {
    bot.sendMessage(userId, `üíµü§ó <b>–î–µ–Ω–µ–∂–∫–∏..</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/usdcash</code> –Ω–∞–∑–≤–∞–Ω–∏–µ <code>-</code> —Å—É–º–º–∞`
        , {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}

bot.onText(/\/usdcash (.+) - (.+)/, (msg, match) => {

    const project = match[1]
    const summa = match[2]
    const tgId = msg.from.id

    if(msg.text !== '–ù–∞–∑–∞–¥') {
        Promise.all([
            Usd.findOne({tgId: tgId, projectu: project}),
            User.findOne({tgId: msg.from.id})
        ])
            .then(([invest, user]) => {

                if(!invest) {
                    bot.sendMessage(msg.from.id, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})}
                else {
                    const sum = +`${invest.cashu}` + +`${summa}`
                    const profit = +`${invest.profitu}` + +`${summa}`
                    const allcash = +`${user.allcashu}` + +`${summa}`
                    const allprofit = +`${user.allprofitu}` + +`${summa}`
                    let a = false
                    if(invest){a = Math.sign(profit) !== -1}
                    const b = a ? '‚≠ê' : '‚ôªÔ∏è'

                    Promise.all([
                        Usd.findOneAndUpdate({tgId: tgId, projectu: project},
                            {$set: {cashu: sum.toFixed(2), profitu: profit.toFixed(2), statu: b}}
                            ,{returnOriginal: false}),

                        User.findOneAndUpdate({tgId: msg.from.id},
                            {$set: {allcashu: allcash.toFixed(2), allprofitu: allprofit.toFixed(2)}}
                            ,{returnOriginal: false})
 ])
.then(([invest, user]) => {
                        bot.sendMessage(msg.from.id, `üëåüòé <b>–ë–∞–ª–∞–Ω—Å—ã –ø–æ–¥–±–∏—Ç—ã!</b> \n<code>${summa}$</code> –∫ –≤—ã–ø–ª–∞—Ç–∞–º –≤ <b>"${project}"</b>`
                                , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                        })
                }}) } });

//RUB RUB RUB RUB RUB RUB RUB RUB RUB RUB RUB RUB
//=================================================

function RUB(chatId, tgId) {
    Promise.all([
        User.findOne({tgId}) ,
        Rub.find({tgId})
    ])
        .then(([user, invest])  => {
           let html
            if (invest.length) {
        html = invest.map((f, i) => {
                    return `${i + 1}. ${f.stat} <b>${f.project}:</b>\nüí∏ <code>${f.dep}‚ÇΩ</code> | üíµ <code>${f.cash}‚ÇΩ</code> | üí∞ <code>${f.profit}‚ÇΩ</code>`
                }).join('\n')
            } else {
                html = 'ü§∑‚Äç‚ôÇÔ∏è <i>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç..</i>'
            }
            bot.sendMessage(tgId,`<b>‚ÇΩ üëàüòé –ü–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è —É—á–µ—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ —Ä—É–±–ª—è—Ö:</b>\n~~~~~~~~~~~~~~~~~~~~\n`+ html+ `\n~~~~~~~~~~~~~~~~~~~~\n<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\nüí∏ ${user.allinvr}‚ÇΩ <code>(–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ)</code>\nüíµ ${user.allcashr}‚ÇΩ <code>(–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ)</code>\nüí∞ ${user.allprofitr}‚ÇΩ <code>(–ø—Ä–æ—Ñ–∏—Ç)</code>`
                , { reply_markup:{inline_keyboard: inline_keyboard.rub} , parse_mode: 'HTML'})

        })}

//callback_query================================================

bot.on('callback_query', query => {
    const userId = query.from.id

    switch (query.data) {
        case 'rubadd':
            rubadd(userId, query.id)
            break;
        case 'rubdel':
            rubdel(userId, query.id)
            break;
        case 'rubdep':
            rubdep(userId, query.id)
            break;
        case 'rubcash':
            rubcash(userId, query.id)
            break;
    }})




//RUB ADD=================================================

function rubadd(userId) {
    bot.sendMessage(userId, `ü§î <b>–ö—É–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º?</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/rubadd</code> –Ω–∞–∑–≤–∞–Ω–∏–µ`,
        {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})}

bot.onText(/\/rubadd (.+)/, (msg, match) => {
    const chatId = msg.chat.id
    const project = match[1]
    const tgId = msg.from.id
    if(msg.text !== '–ù–∞–∑–∞–¥'){

        let investPromise
        Rub.findOne({tgId: tgId, project: project})
            .then((invest) => {
                if (invest) {
                    bot.sendMessage(chatId, `üôÑ <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ —É–∂–µ –µ—Å—Ç—å</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`
                        , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                }
                else {
                    investPromise = new Rub({
                        project: project,
                        tgId: msg.from.id
                    })
                    investPromise.save()
                        .then (invest => {
                            console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ–µ–∫—Ç", invest)
                            bot.sendMessage(chatId, `üòéüëç <b>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b> <i>"${invest.project}"</i>`
                                ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})

                        }) ¬†¬†¬†¬†}
            })}

})



//RUB DEL=================================================

function rubdel(chatId) {
    bot.sendMessage(chatId, `üòï <b>–ß—Ç–æ —Å–Ω–µ—Å—Ç–∏ –≤ –°–ö–ê–ú?</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/rubdel</code> –Ω–∞–∑–≤–∞–Ω–∏–µ`,
        {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}
bot.onText(/\/rubdel (.+)/, (msg, match) => {

    const chatId = msg.chat.id
    const project = match[1]
    const tgId = msg.from.id
    if(project !== '–ù–∞–∑–∞–¥'){
        Rub.findOne({tgId: tgId, project: project})
            .then(invest => {
                if(!invest) {
                    bot.sendMessage(chatId, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})}

                else {
                    Promise.all([
                        Rub.findOne({tgId: tgId, project: project}),
                        User.findOne({tgId: msg.from.id})
                    ])
                        .then(([invest, user]) => {
                            const sum = +`${user.allinvr}` - +`${invest.dep}`

                            Promise.all([
                                User.findOneAndUpdate({tgId: msg.from.id},
                                    {$set: {allinvr: sum.toFixed(2)}}
                                    ,{returnOriginal: false}),

                                Rub.deleteOne({project: project})
                            ]).then(_ => {

                                bot.sendMessage(chatId, `üò§ <b>–ò–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —É–¥–∞–ª–µ–Ω:</b> <i>"${project}"</i>`
                                    ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})

                            }) ¬†¬†¬†¬†})}
            })}
})
//RUB DEP==========================================
function rubdep(userId) {
    bot.sendMessage(userId, `üí™ <b>–°–∞–º–æ–µ –≤—Ä–µ–º—è —É—Å–∏–ª–∏—Ç—å—Å—è!</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/rubdep</code> –Ω–∞–∑–≤–∞–Ω–∏–µ <code>-</code> —Å—É–º–º–∞`
        ,{reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}

bot.onText(/\/rubdep (.+) - (.+)/, (msg, match) => {
    const project = match[1]
    const deposit = match[2]
    const tgId = msg.from.id

    if(msg.text !== '–ù–∞–∑–∞–¥') {
        Promise.all([
            Rub.findOne({tgId: tgId, project: project}),
            User.findOne({tgId: msg.from.id})
        ])
            .then(([invest, user]) => {
                if(!invest) {
                    bot.sendMessage(msg.from.id, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})
                }
                else {
                    const dep = +`${invest.dep}` + +`${deposit}`
                    const profit = +`${invest.profit}` - +`${deposit}`
                    const alldep = +`${user.allinvr}` + +`${deposit}`
                    const allprofit = +`${user.allprofitr}` - +`${deposit}`
                    let a = false
                    if(invest){a = Math.sign(profit) !== -1}
                    const b = a ? '‚≠ê' : '‚ôªÔ∏è'
                    Promise.all([
                        Rub.findOneAndUpdate({tgId: tgId, project: project},
                            {$set: {dep: dep.toFixed(2), profit: profit.toFixed(2), stat: b}}
                            ,{returnOriginal: false}),
                        User.findOneAndUpdate({tgId: msg.from.id},
                            {$set: {allinvr: alldep.toFixed(2), allprofitr: allprofit.toFixed(2)}}
                            ,{returnOriginal: false})
                    ])
                        .then(([invest, user]) => {
                            bot.sendMessage(msg.from.id, `üëåüòé <b>–ë–∞–ª–∞–Ω—Å—ã –ø–æ–¥–±–∏—Ç—ã!</b> \n<code>${deposit}‚ÇΩ</code> –∫ –¥–µ–ø–æ–∑–∏—Ç—É –≤ <b>"${project}"</b>`
                                , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                        })
                }}) } })

//RUB CASH================================================
function rubcash(userId) {
    bot.sendMessage(userId, `üíµü§ó <b>–î–µ–Ω–µ–∂–∫–∏..</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/rubcash</code> –Ω–∞–∑–≤–∞–Ω–∏–µ <code>-</code> —Å—É–º–º–∞`
        , {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}

bot.onText(/\/rubcash (.+) - (.+)/, (msg, match) => {

    const project = match[1]
    const summa = match[2]
    const tgId = msg.from.id

    if(msg.text !== '–ù–∞–∑–∞–¥') {
        Promise.all([
            Rub.findOne({tgId: tgId, project: project}),
            User.findOne({tgId: msg.from.id})
        ])
            .then(([invest, user]) => {

                if(!invest) {
                    bot.sendMessage(msg.from.id, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})}
                else {
                    const sum = +`${invest.cash}` + +`${summa}`
                    const profit = +`${invest.profit}` + +`${summa}`
                    const allcash = +`${user.allcashr}` + +`${summa}`
                    const allprofit = +`${user.allprofitr}` + +`${summa}`
                    let a = false
                    if(invest){a = Math.sign(profit) !== -1}
                    const b = a ? '‚≠ê' : '‚ôªÔ∏è'

                    Promise.all([
                        Rub.findOneAndUpdate({tgId: tgId, project: project},
                            {$set: {cash: sum.toFixed(2), profit: profit.toFixed(2), stat: b}}
                            ,{returnOriginal: false}),

                        User.findOneAndUpdate({tgId: msg.from.id},
                            {$set: {allcashr: allcash.toFixed(2), allprofitr: allprofit.toFixed(2)}}
                            ,{returnOriginal: false})

                    ])

                        .then(([invest, user]) => {
    bot.sendMessage(msg.from.id, `üëåüòé <b>–ë–∞–ª–∞–Ω—Å—ã –ø–æ–¥–±–∏—Ç—ã!</b> \n<code>${summa}‚ÇΩ</code> –∫ –≤—ã–ø–ª–∞—Ç–∞–º –≤ <b>"${project}"</b>`
                                , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                        })
                }}) } });

//BTC BTC BTC BTC BTC BTC

function BTC(chatId, tgId) {
    Promise.all([
        User.findOne({tgId}) ,
        Btc.find({tgId})
    ])
        .then(([user, invest])  => {
            let html
            if (invest.length) {
                html = invest.map((f, i) => {
                    return `${i + 1}. ${f.stat} <b>${f.project}:</b>\nüí∏ <code>${f.dep}‡∏ø</code> | üíµ <code>${f.cash}‡∏ø</code> | üí∞ <code>${f.profit}‡∏ø</code>`
                }).join('\n')
            } else {
                html = 'ü§∑‚Äç‚ôÇÔ∏è <i>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç..</i>'
            }
            bot.sendMessage(tgId,`<b>‡∏ø üëàüòé –ü–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è —É—á–µ—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –±–∏—Ç–∫–æ–∏–Ω–∞—Ö:</b>\n~~~~~~~~~~~~~~~~~~~~\n`+ html+ `\n~~~~~~~~~~~~~~~~~~~~\n<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\nüí∏ ${user.allinvb}‡∏ø <code>(–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ)</code>\nüíµ ${user.allcashb}‡∏ø <code>(–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ)</code>\nüí∞ ${user.allprofitb}‡∏ø <code>(–ø—Ä–æ—Ñ–∏—Ç)</code>`
                , { reply_markup:{inline_keyboard: inline_keyboard.btc} , parse_mode: 'HTML'})

        })}

//callback_query================================================

bot.on('callback_query', query => {
    const userId = query.from.id

    switch (query.data) {
        case 'btcadd':
            btcadd(userId, query.id)
            break;
        case 'btcdel':
            btcdel(userId, query.id)
            break;
        case 'btcdep':
            btcdep(userId, query.id)
            break;
        case 'btccash':
            btccash(userId, query.id)
            break;
    }})




//BTC ADD=================================================

function btcadd(userId) {
    bot.sendMessage(userId, `ü§î <b>–ö—É–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º?</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/btcadd</code> –Ω–∞–∑–≤–∞–Ω–∏–µ`,
        {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})}

bot.onText(/\/btcadd (.+)/, (msg, match) => {
    const chatId = msg.chat.id
    const project = match[1]
    const tgId = msg.from.id
    if(msg.text !== '–ù–∞–∑–∞–¥'){

        let investPromise
        Btc.findOne({tgId: tgId, project: project})
            .then((invest) => {
                if (invest) {
                    bot.sendMessage(chatId, `üôÑ <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ —É–∂–µ –µ—Å—Ç—å</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`
                        , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                }
                else {
                    investPromise = new Btc({
                        project: project,
                        tgId: msg.from.id
                    })
                    investPromise.save()
                        .then (invest => {
                            console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ–µ–∫—Ç", invest)
                            bot.sendMessage(chatId, `üòéüëç <b>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b> <i>"${invest.project}"</i>`
                                ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})

                        }) ¬†¬†¬†¬†}
            })}

})



//BTC DEL=================================================

function btcdel(chatId) {
    bot.sendMessage(chatId, `üòï <b>–ß—Ç–æ —Å–Ω–µ—Å—Ç–∏ –≤ –°–ö–ê–ú?</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/btcdel</code> –Ω–∞–∑–≤–∞–Ω–∏–µ`,
        {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}
bot.onText(/\/btcdel (.+)/, (msg, match) => {

    const chatId = msg.chat.id
    const project = match[1]
    const tgId = msg.from.id
    if(project !== '–ù–∞–∑–∞–¥'){
        Btc.findOne({tgId: tgId, project: project})
            .then(invest => {
                if(!invest) {
                    bot.sendMessage(chatId, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})}

                else {
                    Promise.all([
                        Btc.findOne({tgId: tgId, project: project}),
                        User.findOne({tgId: msg.from.id})
                    ])
                        .then(([invest, user]) => {
                            const sum = +`${user.allinvb}` - +`${invest.dep}`

                            Promise.all([
                                User.findOneAndUpdate({tgId: msg.from.id},
                                    {$set: {allinvb: sum.toFixed(2)}}
                                    ,{returnOriginal: false}),

                                Btc.deleteOne({project: project})
                            ]).then(_ => {

                                bot.sendMessage(chatId, `üò§ <b>–ò–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —É–¥–∞–ª–µ–Ω:</b> <i>"${project}"</i>`
                                    ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                                if(err) return console.log(err)
                            }) ¬†¬†¬†¬†})}
            })}
})
//BTC DEP==========================================
function btcdep(userId) {
    bot.sendMessage(userId, `üí™ <b>–°–∞–º–æ–µ –≤—Ä–µ–º—è —É—Å–∏–ª–∏—Ç—å—Å—è!</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/btcdep</code> –Ω–∞–∑–≤–∞–Ω–∏–µ <code>-</code> —Å—É–º–º–∞`
        ,{reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}

bot.onText(/\/btcdep (.+) - (.+)/, (msg, match) => {
    const project = match[1]
    const deposit = match[2]
    const tgId = msg.from.id

    if(msg.text !== '–ù–∞–∑–∞–¥') {
        Promise.all([
            Btc.findOne({tgId: tgId, project: project}),
            User.findOne({tgId: msg.from.id})
        ])
            .then(([invest, user]) => {
                if(!invest) {
                    bot.sendMessage(msg.from.id, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})
                }
                else {
                    const dep = +`${invest.dep}` + +`${deposit}`
                    const profit = +`${invest.profit}` - +`${deposit}`
                    const alldep = +`${user.allinvb}` + +`${deposit}`
                    const allprofit = +`${user.allprofitb}` - +`${deposit}`
                    let a = false
                    if(invest){a = Math.sign(profit) !== -1}
                    const b = a ? '‚≠ê' : '‚ôªÔ∏è'
                    Promise.all([
                        Btc.findOneAndUpdate({tgId: tgId, project: project},
                            {$set: {dep: dep.toFixed(2), profit: profit.toFixed(2), stat: b}}
                            ,{returnOriginal: false}),
                        User.findOneAndUpdate({tgId: msg.from.id},
                            {$set: {allinvb: alldep.toFixed(2), allprofitb: allprofit.toFixed(2)}}
                            ,{returnOriginal: false})
                    ])
                        .then(([invest, user]) => {
                            bot.sendMessage(msg.from.id, `üëåüòé <b>–ë–∞–ª–∞–Ω—Å—ã –ø–æ–¥–±–∏—Ç—ã!</b> \n<code>${deposit}‡∏ø</code> –∫ –¥–µ–ø–æ–∑–∏—Ç—É –≤ <b>"${project}"</b>`
                                , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                        })
                }}) } })

//btc CASH================================================
function btccash(userId) {
    bot.sendMessage(userId, `üíµü§ó <b>–î–µ–Ω–µ–∂–∫–∏..</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:</i>\n\n<code>/btccash</code> –Ω–∞–∑–≤–∞–Ω–∏–µ <code>-</code> —Å—É–º–º–∞`
        , {reply_markup: {keyboard: keyboard.usd, resize_keyboard: true},parse_mode: 'HTML'})
}

bot.onText(/\/btccash (.+) - (.+)/, (msg, match) => {

    const project = match[1]
    const summa = match[2]
    const tgId = msg.from.id

    if(msg.text !== '–ù–∞–∑–∞–¥') {
        Promise.all([
            Btc.findOne({tgId: tgId, project: project}),
            User.findOne({tgId: msg.from.id})
        ])
            .then(([invest, user]) => {

                if(!invest) {
                    bot.sendMessage(msg.from.id, `üïµÔ∏è <b>–í –í–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç</b> <i>"${project}"</i>.\n<code>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ..</code>`,{parse_mode: 'HTML'})}
                else {
                    const sum = +`${invest.cash}` + +`${summa}`
                    const profit = +`${invest.profit}` + +`${summa}`
                    const allcash = +`${user.allcashb}` + +`${summa}`
                    const allprofit = +`${user.allprofitb}` + +`${summa}`
                    let a = false
                    if(invest){a = Math.sign(profit) !== -1}
                    const b = a ? '‚≠ê' : '‚ôªÔ∏è'


                    Promise.all([
                        Btc.findOneAndUpdate({tgId: tgId, project: project},
                            {$set: {cash: sum.toFixed(2), profit: profit.toFixed(2), stat: b}}
                            ,{returnOriginal: false}),

                        User.findOneAndUpdate({tgId: msg.from.id},
                            {$set: {allcashb: allcash.toFixed(2), allprofitb: allprofit.toFixed(2)}}
                            ,{returnOriginal: false})

                    ])

                        .then(([invest, user]) => {
                            bot.sendMessage(msg.from.id, `üëåüòé <b>–ë–∞–ª–∞–Ω—Å—ã –ø–æ–¥–±–∏—Ç—ã!</b> \n<code>${summa}‡∏ø</code> –∫ –≤—ã–ø–ª–∞—Ç–∞–º –≤ <b>"${project}"</b>`
                                , {reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
                        })
                }}) } });
//BONUS=====================================================

function BONUS(msg) {

    User.findOne({tgId: msg.from.id})
        .then(user => {
            bot.sendMessage(msg.from.id,`üòã <b>–í –í–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–∫–µ:</b> ${user.bonus} üç©\n\n<i>100 üç© = $1 USD</i>`, {parse_mode: 'HTML'})

        })}


bot.onText(/\/bonus (.+) (.+)/, (msg, match) => {

    const bonus = match[1]
    const bon = match[2]
    winners.length = 0
    Admin.findOne({tgId: msg.from.id})
        .then(admin => {
            if(admin){
                Promise.all
                ([
                    User.updateMany({bon: '1'},
                        {$set: {bon: '0'}}),
                    Admin.findOneAndUpdate({tgId: '184670517'},
                        {$set: {bon: bon, bonus: bonus, win: winners}}
                        ,{returnOriginal: false}
                    )
                ]).then(([user, adm]) => {

                    bot.sendMessage(-1001319046439, `üòã –ü–ª—é—à–∫–∏ üç©üç©üç©`,
                        { reply_markup:{inline_keyboard: inline_keyboard.bonus} , parse_mode: 'HTML'}
                    )
                })
            }

        })

}	)

bot.on('callback_query', query => {
    const userId = query.from.id
    switch (query.data) {
        case 'get':
            get(userId)
            break;
    }
})

function get(userId) {
    User.findOne({tgId: userId})
        .then(user => {
            if(user){

                Promise.all([
                    User.findOne({tgId: userId}),
                    Admin.findOne({tgId: '184670517'})
                ]).then(([user, admin]) => {

                    if(user.bon === 0 && admin.bonus > 0) {
                        let abonus = +`${admin.bonus}` - +`${admin.bon}`
                            let ubonus = +`${user.bonus}` + +`${admin.bon}`

                            winners.push(user.name)
                      
                        Promise.all
                        ([
                            Admin.findOneAndUpdate({tgId: '184670517'},
                                {$set: {bonus: abonus, win: winners}}),
                            User.findOneAndUpdate({tgId: user.tgId},
                                {$set: {bon: '1', bonus: ubonus}}
                            )
                        ]).then(([admin, user]) => {

                            bot.sendMessage(userId, `üòã –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${admin.bon} üç©`)

                        })
                    }
                    else {
                        bot.sendMessage(userId, 'üö´ –ë–æ–Ω—É—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
                    }
                })
            }}
        )
}

bot.onText(/\/win/, msg => {
    Admin.findOne({tgId: msg.from.id})
        .then(admin => {
            if(admin){
                if(admin.bonus === 0) {
                    bot.sendMessage(-1001319046439, `üéä <b>–†–∞–∑–¥–∞—á–∞ –±–æ–Ω—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–ª—é—à–∫–∏ –ø–æ–ª—É—á–∏–ª–∏:</b> \n\n${admin.win}`, {parse_mode: 'HTML'})

                }
                else {
                    bot.sendMessage(msg.from.id, `${admin}`)}

            }
            
        })
})
//======================================================================================



             
//RESET===================================
bot.onText(/\/resetrub/, (msg) => {
    Promise.all([
        User.findOneAndUpdate({tgId: msg.from.id},
            {$set: {allinvr: '0', allcashr: '0', allprofitr: '0'}}),
        Rub.remove({tgId: msg.from.id})
    ]).then(_ => {
           bot.sendMessage(msg.from.id, '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è <b>"üíº RUB"</b> —É–¥–∞–ª–µ–Ω—ã!'
               ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
            })
        });

bot.onText(/\/resetusd/, (msg) => {
    Promise.all([
        User.findOneAndUpdate({tgId: msg.from.id},
            {$set: {allinvu: '0', allcashu: '0', allprofitu: '0'}}),
        Usd.remove({tgId: msg.from.id})
    ]).then(_ => {
        bot.sendMessage(msg.from.id, '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è <b>"üíº USD"</b> —É–¥–∞–ª–µ–Ω—ã!'
            ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
    })
});

bot.onText(/\/resetbtc/, (msg) => {
    Promise.all([
        User.findOneAndUpdate({tgId: msg.from.id},
            {$set: {allinvb: '0', allcashb: '0', allprofitb: '0'}}),
        Btc.remove({tgId: msg.from.id})
    ]).then(_ => {
        bot.sendMessage(msg.from.id, '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è <b>"üíº BTC"</b> —É–¥–∞–ª–µ–Ω—ã!'
            ,{reply_markup: {keyboard: keyboard.home, resize_keyboard: true}, parse_mode: 'HTML'})
    })
});
//RESET===================================

